#!/usr/bin/env python3
"""
Pulumi Factory - Examples Generation Script

This script creates example infrastructure code for local backend Pulumi projects:
1. Generates template-specific example code
2. Creates simple, educational examples
3. Includes comments and documentation
4. Provides starting points for common use cases

SECURITY NOTES:
- This script only creates example code files
- No network calls or credential handling
- All operations are local file system only
- Examples use placeholder values, not real credentials

Author: Pulumi Factory - Local Backend
"""

import argparse
import logging
import sys
from pathlib import Path
from typing import Dict, Any

# Configure logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler(sys.stdout)
    ]
)
logger = logging.getLogger(__name__)


class ExamplesGenerator:
    """
    Generates example infrastructure code for local backend Pulumi projects.
    
    This class handles:
    - Template-specific example generation
    - Common use case examples
    - Educational code with comments
    - Starter templates for development
    """
    
    def __init__(self, project_name: str, stack_name: str, template: str):
        """
        Initialize the examples generator.
        
        Args:
            project_name: Name of the Pulumi project
            stack_name: Name of the Pulumi stack
            template: Pulumi template type
        """
        self.project_name = project_name
        self.stack_name = stack_name
        self.template = template
        
        logger.info(f"Initialized examples generator for {project_name} ({template})")
    
    def generate_python_examples(self):
        """
        Generate Python-specific example code.
        """
        logger.info("Generating Python examples...")
        
        # Enhanced main program with examples - build content using string concatenation to avoid f-string issues
        project_name_var = self.project_name
        
        main_content = f'''"""
{project_name_var} - Pulumi Infrastructure

This is the main Pulumi program for the {project_name_var} project.
It demonstrates common AWS resource patterns using Python.

Generated by Pulumi Factory (Local Backend)
"""

import pulumi
import pulumi_aws as aws
from typing import Dict, Any, Optional

# Get configuration values
config = pulumi.Config()

# Environment configuration (can be overridden via pulumi config)
environment = config.get("project:environment") or "development"
project_name = config.get("project:name") or "{project_name_var}"

# AWS configuration
aws_region = config.get("aws:region") or "us-east-1"

# Common tags applied to all resources
common_tags = {{
    "Environment": environment,
    "Project": project_name,
    "Stack": pulumi.get_stack(),
    "ManagedBy": "Pulumi",
    "Backend": "Local"
}}

# Example 1: S3 Bucket with configuration
# This creates a simple S3 bucket with versioning and encryption
example_bucket = aws.s3.Bucket(
    "example-bucket",
    bucket_prefix=f"{{project_name}}-{{pulumi.get_stack()}}-",
    versioning={{
        "enabled": True
    }},
    server_side_encryption_configuration={{
        "rule": {{
            "apply_server_side_encryption_by_default": {{
                "sse_algorithm": "AES256"
            }}
        }}
    }},
    tags=common_tags
)

# Example 2: IAM Role for EC2 instances
# This creates an IAM role that can be assumed by EC2 instances
ec2_role = aws.iam.Role(
    "ec2-role",
    name_prefix=f"{{project_name}}-ec2-",
    assume_role_policy=pulumi.Output.json_dumps({{
        "Version": "2012-10-17",
        "Statement": [{{
            "Action": "sts:AssumeRole",
            "Effect": "Allow",
            "Principal": {{
                "Service": "ec2.amazonaws.com"
            }}
        }}]
    }}),
    tags=common_tags
)

# Attach a basic policy to the role
role_policy_attachment = aws.iam.RolePolicyAttachment(
    "ec2-role-policy",
    role=ec2_role.name,
    policy_arn="arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore"
)

# Create instance profile for the role
instance_profile = aws.iam.InstanceProfile(
    "ec2-instance-profile",
    name_prefix=f"{{project_name}}-ec2-",
    role=ec2_role.name
)

# Example 3: Security Group
# This creates a security group with common web application rules
web_security_group = aws.ec2.SecurityGroup(
    "web-sg",
    name_prefix=f"{{project_name}}-web-",
    description="Security group for web applications",
    ingress=[
        # HTTP access
        {{
            "protocol": "tcp",
            "from_port": 80,
            "to_port": 80,
            "cidr_blocks": ["0.0.0.0/0"],
            "description": "HTTP access"
        }},
        # HTTPS access
        {{
            "protocol": "tcp", 
            "from_port": 443,
            "to_port": 443,
            "cidr_blocks": ["0.0.0.0/0"],
            "description": "HTTPS access"
        }},
        # SSH access (restricted - update CIDR as needed)
        {{
            "protocol": "tcp",
            "from_port": 22,
            "to_port": 22,
            "cidr_blocks": ["10.0.0.0/8"],  # Private network only
            "description": "SSH access from private networks"
        }}
    ],
    egress=[
        # Allow all outbound traffic
        {{
            "protocol": "-1",
            "from_port": 0,
            "to_port": 0,
            "cidr_blocks": ["0.0.0.0/0"],
            "description": "All outbound traffic"
        }}
    ],
    tags=common_tags
)

# Example 4: CloudWatch Log Group
# This creates a log group for application logging
log_group = aws.cloudwatch.LogGroup(
    "app-logs",
    name_prefix=f"/aws/pulumi/{{project_name}}/",
    retention_in_days=14,  # Adjust retention as needed
    tags=common_tags
)

# Example 5: SSM Parameter for configuration
# This creates a parameter for storing configuration values
config_parameter = aws.ssm.Parameter(
    "app-config",
    name=f"/{{project_name}}/{{pulumi.get_stack()}}/config",
    type="String",
    value=pulumi.Output.json_dumps({{
        "environment": environment,
        "region": aws_region,
        "project": project_name
    }}),
    description=f"Configuration for {{project_name}}",
    tags=common_tags
)'''

        # Add Lambda example as a separate string to avoid nested f-string issues
        lambda_example = '''
# Example 6: Lambda Function (commented out - uncomment if needed)
# This shows how to create a simple Lambda function
#
# First, create the IAM role for Lambda
# lambda_role = aws.iam.Role(
#     "lambda-role",
#     name_prefix=project_name + "-lambda-",
#     assume_role_policy=pulumi.Output.json_dumps({
#         "Version": "2012-10-17",
#         "Statement": [{
#             "Action": "sts:AssumeRole",
#             "Effect": "Allow",
#             "Principal": {
#                 "Service": "lambda.amazonaws.com"
#             }
#         }]
#     }),
#     tags=common_tags
# )
#
# # Attach basic Lambda execution policy
# lambda_policy = aws.iam.RolePolicyAttachment(
#     "lambda-policy",
#     role=lambda_role.name,
#     policy_arn="arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
# )
#
# # Create the Lambda function with inline code
# lambda_code = """exports.handler = async (event) => {
#     console.log('Event:', JSON.stringify(event));
#     return {
#         statusCode: 200,
#         body: JSON.stringify({
#             message: 'Hello from Pulumi Lambda!',
#             project: '""" + project_name + """',
#             stack: '""" + pulumi.get_stack() + """'
#         })
#     };
# };"""
#
# lambda_function = aws.lambda_.Function(
#     "example-lambda",
#     name_prefix=project_name + "-",
#     code=pulumi.AssetArchive({
#         "index.js": pulumi.StringAsset(lambda_code)
#     }),
#     role=lambda_role.arn,
#     handler="index.handler",
#     runtime="nodejs18.x",
#     timeout=30,
#     tags=common_tags
# )
'''

        # Add outputs section
        outputs_section = '''
# Outputs - these values will be displayed after deployment
pulumi.export("bucket_name", example_bucket.bucket)
pulumi.export("bucket_arn", example_bucket.arn)
pulumi.export("security_group_id", web_security_group.id)
pulumi.export("log_group_name", log_group.name)
pulumi.export("config_parameter_name", config_parameter.name)
pulumi.export("instance_profile_name", instance_profile.name)

# Export configuration for reference
pulumi.export("environment", environment)
pulumi.export("aws_region", aws_region)
pulumi.export("common_tags", common_tags)

# Export useful information for development
pulumi.export("project_info", {{
    "name": project_name,
    "stack": pulumi.get_stack(),
    "backend": "local",
    "generated_by": "Pulumi Factory"
}})
'''

        # Combine all parts
        main_content = main_content + lambda_example + outputs_section

        # Write the enhanced main program
        with open('__main__.py', 'w', encoding='utf-8') as f:
            f.write(main_content)
        
        # Create examples directory with additional examples
        examples_dir = Path('examples')
        examples_dir.mkdir(exist_ok=True)
        
        # Example: VPC creation
        vpc_example = '''"""
Example: Complete VPC Setup

This example shows how to create a VPC with public and private subnets,
internet gateway, NAT gateway, and route tables.
"""

import pulumi
import pulumi_aws as aws

def create_vpc():
    # VPC
    vpc = aws.ec2.Vpc(
        "main-vpc",
        cidr_block="10.0.0.0/16",
        enable_dns_hostnames=True,
        enable_dns_support=True,
        tags={
            "Name": "Main VPC"
        }
    )
    
    # Internet Gateway
    igw = aws.ec2.InternetGateway(
        "main-igw",
        vpc_id=vpc.id,
        tags={
            "Name": "Main Internet Gateway"
        }
    )
    
    # Public Subnet
    public_subnet = aws.ec2.Subnet(
        "public-subnet",
        vpc_id=vpc.id,
        cidr_block="10.0.1.0/24",
        availability_zone="us-east-1a",
        map_public_ip_on_launch=True,
        tags={
            "Name": "Public Subnet"
        }
    )
    
    # Private Subnet
    private_subnet = aws.ec2.Subnet(
        "private-subnet",
        vpc_id=vpc.id,
        cidr_block="10.0.2.0/24",
        availability_zone="us-east-1b",
        tags={
            "Name": "Private Subnet"
        }
    )
    
    # Public Route Table
    public_rt = aws.ec2.RouteTable(
        "public-rt",
        vpc_id=vpc.id,
        tags={
            "Name": "Public Route Table"
        }
    )
    
    # Public Route
    aws.ec2.Route(
        "public-route",
        route_table_id=public_rt.id,
        destination_cidr_block="0.0.0.0/0",
        gateway_id=igw.id
    )
    
    # Associate public subnet with public route table
    aws.ec2.RouteTableAssociation(
        "public-rta",
        subnet_id=public_subnet.id,
        route_table_id=public_rt.id
    )
    
    return vpc, public_subnet, private_subnet

# Uncomment to use:
# vpc, public_subnet, private_subnet = create_vpc()
# pulumi.export("vpc_id", vpc.id)
# pulumi.export("public_subnet_id", public_subnet.id)
# pulumi.export("private_subnet_id", private_subnet.id)
'''
        
        with open(examples_dir / 'vpc_example.py', 'w', encoding='utf-8') as f:
            f.write(vpc_example)
        
        # Example: RDS Database
        rds_example = '''"""
Example: RDS Database Setup

This example shows how to create an RDS database with proper security
and backup configuration.
"""

import pulumi
import pulumi_aws as aws

def create_database():
    # Database subnet group
    db_subnet_group = aws.rds.SubnetGroup(
        "db-subnet-group",
        subnet_ids=[
            # Add your subnet IDs here
            # private_subnet_1.id,
            # private_subnet_2.id,
        ],
        tags={
            "Name": "Database Subnet Group"
        }
    )
    
    # Database parameter group
    db_parameter_group = aws.rds.ParameterGroup(
        "db-params",
        family="mysql8.0",
        description="Custom parameter group for MySQL 8.0",
        parameters=[{
            "name": "innodb_buffer_pool_size",
            "value": "{DBInstanceClassMemory*3/4}"
        }]
    )
    
    # Database security group
    db_security_group = aws.ec2.SecurityGroup(
        "db-sg",
        description="Security group for RDS database",
        ingress=[{
            "protocol": "tcp",
            "from_port": 3306,
            "to_port": 3306,
            "security_groups": [
                # Add application security group here
            ],
            "description": "MySQL access from application"
        }],
        tags={
            "Name": "Database Security Group"
        }
    )
    
    # RDS Instance
    database = aws.rds.Instance(
        "main-database",
        identifier_prefix="myapp-db-",
        engine="mysql",
        engine_version="8.0",
        instance_class="db.t3.micro",
        allocated_storage=20,
        max_allocated_storage=100,
        storage_type="gp2",
        storage_encrypted=True,
        
        # Database configuration
        db_name="myapp",
        username="admin",
        password=pulumi.Config().require_secret("db_password"),
        
        # Network configuration
        db_subnet_group_name=db_subnet_group.name,
        vpc_security_group_ids=[db_security_group.id],
        
        # Backup configuration
        backup_retention_period=7,
        backup_window="03:00-04:00",
        maintenance_window="sun:04:00-sun:05:00",
        
        # Monitoring
        monitoring_interval=60,
        performance_insights_enabled=True,
        
        # Parameter group
        parameter_group_name=db_parameter_group.name,
        
        # Deletion protection
        deletion_protection=False,  # Set to True for production
        skip_final_snapshot=True,   # Set to False for production
        
        tags={
            "Name": "Main Database"
        }
    )
    
    return database

# To use this example:
# 1. Set database password: pulumi config set --secret db_password your-password
# 2. Uncomment the following lines:
# database = create_database()
# pulumi.export("database_endpoint", database.endpoint)
# pulumi.export("database_port", database.port)
'''
        
        with open(examples_dir / 'rds_example.py', 'w', encoding='utf-8') as f:
            f.write(rds_example)
        
        logger.info("Python examples generated successfully")
    
    def generate_typescript_examples(self):
        """
        Generate TypeScript-specific example code.
        """
        logger.info("Generating TypeScript examples...")
        
        # Enhanced main program - use separate variables to avoid f-string issues
        project_name_var = self.project_name
        
        main_content = f'''/**
 * {project_name_var} - Pulumi Infrastructure
 * 
 * This is the main Pulumi program for the {project_name_var} project.
 * It demonstrates common AWS resource patterns using TypeScript.
 * 
 * Generated by Pulumi Factory (Local Backend)
 */

import * as pulumi from "@pulumi/pulumi";
import * as aws from "@pulumi/aws";

// Get configuration values
const config = new pulumi.Config();

// Environment configuration
const environment = config.get("project:environment") || "development";
const projectName = config.get("project:name") || "{project_name_var}";
const awsRegion = config.get("aws:region") || "us-east-1";

// Common tags applied to all resources
const commonTags = {{
    Environment: environment,
    Project: projectName,
    Stack: pulumi.getStack(),
    ManagedBy: "Pulumi",
    Backend: "Local"
}};

// Example 1: S3 Bucket with configuration
const exampleBucket = new aws.s3.Bucket("example-bucket", {{
    bucketPrefix: `${{projectName}}-${{pulumi.getStack()}}-`,
    versioning: {{
        enabled: true
    }},
    serverSideEncryptionConfiguration: {{
        rule: {{
            applyServerSideEncryptionByDefault: {{
                sseAlgorithm: "AES256"
            }}
        }}
    }},
    tags: commonTags
}});

// Example 2: IAM Role for EC2 instances
const ec2Role = new aws.iam.Role("ec2-role", {{
    namePrefix: `${{projectName}}-ec2-`,
    assumeRolePolicy: JSON.stringify({{
        Version: "2012-10-17",
        Statement: [{{
            Action: "sts:AssumeRole",
            Effect: "Allow",
            Principal: {{
                Service: "ec2.amazonaws.com"
            }}
        }}]
    }}),
    tags: commonTags
}});

// Attach policy to the role
const rolePolicyAttachment = new aws.iam.RolePolicyAttachment("ec2-role-policy", {{
    role: ec2Role.name,
    policyArn: "arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore"
}});

// Create instance profile
const instanceProfile = new aws.iam.InstanceProfile("ec2-instance-profile", {{
    namePrefix: `${{projectName}}-ec2-`,
    role: ec2Role.name
}});

// Example 3: Security Group
const webSecurityGroup = new aws.ec2.SecurityGroup("web-sg", {{
    namePrefix: `${{projectName}}-web-`,
    description: "Security group for web applications",
    ingress: [
        {{
            protocol: "tcp",
            fromPort: 80,
            toPort: 80,
            cidrBlocks: ["0.0.0.0/0"],
            description: "HTTP access"
        }},
        {{
            protocol: "tcp",
            fromPort: 443,
            toPort: 443,
            cidrBlocks: ["0.0.0.0/0"],
            description: "HTTPS access"
        }},
        {{
            protocol: "tcp",
            fromPort: 22,
            toPort: 22,
            cidrBlocks: ["10.0.0.0/8"],
            description: "SSH access from private networks"
        }}
    ],
    egress: [{{
        protocol: "-1",
        fromPort: 0,
        toPort: 0,
        cidrBlocks: ["0.0.0.0/0"],
        description: "All outbound traffic"
    }}],
    tags: commonTags
}});

// Example 4: CloudWatch Log Group
const logGroup = new aws.cloudwatch.LogGroup("app-logs", {{
    namePrefix: `/aws/pulumi/${{projectName}}/`,
    retentionInDays: 14,
    tags: commonTags
}});

// Example 5: SSM Parameter
const configParameter = new aws.ssm.Parameter("app-config", {{
    name: `/${{projectName}}/${{pulumi.getStack()}}/config`,
    type: "String",
    value: JSON.stringify({{
        environment: environment,
        region: awsRegion,
        project: projectName
    }}),
    description: `Configuration for ${{projectName}}`,
    tags: commonTags
}});

// Exports
export const bucketName = exampleBucket.bucket;
export const bucketArn = exampleBucket.arn;
export const securityGroupId = webSecurityGroup.id;
export const logGroupName = logGroup.name;
export const configParameterName = configParameter.name;
export const instanceProfileName = instanceProfile.name;

// Export configuration
export const projectEnvironment = environment;
export const awsRegionUsed = awsRegion;
export const tagsUsed = commonTags;

// Export project info
export const projectInfo = {{
    name: projectName,
    stack: pulumi.getStack(),
    backend: "local",
    generatedBy: "Pulumi Factory"
}};
'''
        
        with open('index.ts', 'w', encoding='utf-8') as f:
            f.write(main_content)
        
        logger.info("TypeScript examples generated successfully")
    
    def generate_go_examples(self):
        """
        Generate Go-specific example code.
        """
        logger.info("Generating Go examples...")
        
        # Enhanced main program - use separate variables to avoid f-string issues
        project_name_var = self.project_name
        
        main_content = f'''package main

// {project_name_var} - Pulumi Infrastructure
//
// This is the main Pulumi program for the {project_name_var} project.
// It demonstrates common AWS resource patterns using Go.
//
// Generated by Pulumi Factory (Local Backend)

import (
	"encoding/json"
	"fmt"

	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/cloudwatch"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/ec2"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/iam"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/s3"
	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/ssm"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
)

func main() {{
	pulumi.Run(func(ctx *pulumi.Context) error {{
		// Get configuration values
		cfg := config.New(ctx, "")
		
		// Environment configuration
		environment := cfg.Get("project:environment")
		if environment == "" {{
			environment = "development"
		}}
		
		projectName := cfg.Get("project:name")
		if projectName == "" {{
			projectName = "{project_name_var}"
		}}
		
		awsRegion := cfg.Get("aws:region")
		if awsRegion == "" {{
			awsRegion = "us-east-1"
		}}
		
		// Common tags
		commonTags := pulumi.StringMap{{
			"Environment": pulumi.String(environment),
			"Project":     pulumi.String(projectName),
			"Stack":       pulumi.String(ctx.Stack()),
			"ManagedBy":   pulumi.String("Pulumi"),
			"Backend":     pulumi.String("Local"),
		}}
		
		// Example 1: S3 Bucket
		bucketPrefix := fmt.Sprintf("%s-%s-", projectName, ctx.Stack())
		exampleBucket, err := s3.NewBucket(ctx, "example-bucket", &s3.BucketArgs{{
			BucketPrefix: pulumi.String(bucketPrefix),
			Versioning: &s3.BucketVersioningArgs{{
				Enabled: pulumi.Bool(true),
			}},
			ServerSideEncryptionConfiguration: &s3.BucketServerSideEncryptionConfigurationArgs{{
				Rule: &s3.BucketServerSideEncryptionConfigurationRuleArgs{{
					ApplyServerSideEncryptionByDefault: &s3.BucketServerSideEncryptionConfigurationRuleApplyServerSideEncryptionByDefaultArgs{{
						SseAlgorithm: pulumi.String("AES256"),
					}},
				}},
			}},
			Tags: commonTags,
		}})
		if err != nil {{
			return err
		}}
		
		// Example 2: IAM Role for EC2
		assumeRolePolicy, _ := json.Marshal(map[string]interface{{}}{{
			"Version": "2012-10-17",
			"Statement": []map[string]interface{{}}{{{{
				"Action": "sts:AssumeRole",
				"Effect": "Allow",
				"Principal": map[string]interface{{}}{{
					"Service": "ec2.amazonaws.com",
				}},
			}}}},
		}})
		
		ec2RolePrefix := fmt.Sprintf("%s-ec2-", projectName)
		ec2Role, err := iam.NewRole(ctx, "ec2-role", &iam.RoleArgs{{
			NamePrefix:        pulumi.String(ec2RolePrefix),
			AssumeRolePolicy:  pulumi.String(string(assumeRolePolicy)),
			Tags:             commonTags,
		}})
		if err != nil {{
			return err
		}}
		
		// Attach policy to role
		_, err = iam.NewRolePolicyAttachment(ctx, "ec2-role-policy", &iam.RolePolicyAttachmentArgs{{
			Role:      ec2Role.Name,
			PolicyArn: pulumi.String("arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore"),
		}})
		if err != nil {{
			return err
		}}
		
		// Create instance profile
		instanceProfilePrefix := fmt.Sprintf("%s-ec2-", projectName)
		instanceProfile, err := iam.NewInstanceProfile(ctx, "ec2-instance-profile", &iam.InstanceProfileArgs{{
			NamePrefix: pulumi.String(instanceProfilePrefix),
			Role:       ec2Role.Name,
		}})
		if err != nil {{
			return err
		}}
		
		// Example 3: Security Group
		webSgPrefix := fmt.Sprintf("%s-web-", projectName)
		webSecurityGroup, err := ec2.NewSecurityGroup(ctx, "web-sg", &ec2.SecurityGroupArgs{{
			NamePrefix:  pulumi.String(webSgPrefix),
			Description: pulumi.String("Security group for web applications"),
			Ingress: ec2.SecurityGroupIngressArray{{
				&ec2.SecurityGroupIngressArgs{{
					Protocol:    pulumi.String("tcp"),
					FromPort:    pulumi.Int(80),
					ToPort:      pulumi.Int(80),
					CidrBlocks:  pulumi.StringArray{{pulumi.String("0.0.0.0/0")}},
					Description: pulumi.String("HTTP access"),
				}},
				&ec2.SecurityGroupIngressArgs{{
					Protocol:    pulumi.String("tcp"),
					FromPort:    pulumi.Int(443),
					ToPort:      pulumi.Int(443),
					CidrBlocks:  pulumi.StringArray{{pulumi.String("0.0.0.0/0")}},
					Description: pulumi.String("HTTPS access"),
				}},
				&ec2.SecurityGroupIngressArgs{{
					Protocol:    pulumi.String("tcp"),
					FromPort:    pulumi.Int(22),
					ToPort:      pulumi.Int(22),
					CidrBlocks:  pulumi.StringArray{{pulumi.String("10.0.0.0/8")}},
					Description: pulumi.String("SSH access from private networks"),
				}},
			}},
			Egress: ec2.SecurityGroupEgressArray{{
				&ec2.SecurityGroupEgressArgs{{
					Protocol:    pulumi.String("-1"),
					FromPort:    pulumi.Int(0),
					ToPort:      pulumi.Int(0),
					CidrBlocks:  pulumi.StringArray{{pulumi.String("0.0.0.0/0")}},
					Description: pulumi.String("All outbound traffic"),
				}},
			}},
			Tags: commonTags,
		}})
		if err != nil {{
			return err
		}}
		
		// Example 4: CloudWatch Log Group
		logGroupPrefix := fmt.Sprintf("/aws/pulumi/%s/", projectName)
		logGroup, err := cloudwatch.NewLogGroup(ctx, "app-logs", &cloudwatch.LogGroupArgs{{
			NamePrefix:        pulumi.String(logGroupPrefix),
			RetentionInDays:   pulumi.Int(14),
			Tags:             commonTags,
		}})
		if err != nil {{
			return err
		}}
		
		// Example 5: SSM Parameter
		configValue := map[string]interface{{}}{{
			"environment": environment,
			"region":      awsRegion,
			"project":     projectName,
		}}
		configValueJson, _ := json.Marshal(configValue)
		
		parameterName := fmt.Sprintf("/%s/%s/config", projectName, ctx.Stack())
		configParameter, err := ssm.NewParameter(ctx, "app-config", &ssm.ParameterArgs{{
			Name:        pulumi.String(parameterName),
			Type:        pulumi.String("String"),
			Value:       pulumi.String(string(configValueJson)),
			Description: pulumi.String(fmt.Sprintf("Configuration for %s", projectName)),
			Tags:        commonTags,
		}})
		if err != nil {{
			return err
		}}
		
		// Exports
		ctx.Export("bucketName", exampleBucket.Bucket)
		ctx.Export("bucketArn", exampleBucket.Arn)
		ctx.Export("securityGroupId", webSecurityGroup.ID())
		ctx.Export("logGroupName", logGroup.Name)
		ctx.Export("configParameterName", configParameter.Name)
		ctx.Export("instanceProfileName", instanceProfile.Name)
		
		// Export configuration
		ctx.Export("environment", pulumi.String(environment))
		ctx.Export("awsRegion", pulumi.String(awsRegion))
		
		// Export project info
		projectInfo := map[string]interface{{}}{{
			"name":        projectName,
			"stack":       ctx.Stack(),
			"backend":     "local",
			"generatedBy": "Pulumi Factory",
		}}
		ctx.Export("projectInfo", pulumi.ToMap(projectInfo))
		
		return nil
	}})
}}
'''
        
        with open('main.go', 'w', encoding='utf-8') as f:
            f.write(main_content)
        
        logger.info("Go examples generated successfully")
    
    def generate_csharp_examples(self):
        """
        Generate C#-specific example code.
        """
        logger.info("Generating C# examples...")
        
        # Enhanced main program - use separate variables to avoid f-string issues
        project_name_var = self.project_name
        
        main_content = f'''using System.Collections.Generic;
using System.Text.Json;
using Pulumi;
using Pulumi.Aws.CloudWatch;
using Pulumi.Aws.Ec2;
using Pulumi.Aws.Iam;
using Pulumi.Aws.S3;
using Pulumi.Aws.Ssm;

/// <summary>
/// {project_name_var} - Pulumi Infrastructure
/// 
/// This is the main Pulumi program for the {project_name_var} project.
/// It demonstrates common AWS resource patterns using C#.
/// 
/// Generated by Pulumi Factory (Local Backend)
/// </summary>
class Program
{{
    static Task<int> Main()
    {{
        return Deployment.RunAsync(() => 
        {{
            // Get configuration values
            var config = new Pulumi.Config();
            
            // Environment configuration
            var environment = config.Get("project:environment") ?? "development";
            var projectName = config.Get("project:name") ?? "{project_name_var}";
            var awsRegion = config.Get("aws:region") ?? "us-east-1";
            
            // Common tags applied to all resources
            var commonTags = new Dictionary<string, object>
            {{
                ["Environment"] = environment,
                ["Project"] = projectName,
                ["Stack"] = Deployment.Instance.StackName,
                ["ManagedBy"] = "Pulumi",
                ["Backend"] = "Local"
            }};
            
            // Example 1: S3 Bucket with configuration
            var bucketPrefix = $"{{projectName}}-{{Deployment.Instance.StackName}}-";
            var exampleBucket = new Bucket("example-bucket", new BucketArgs
            {{
                BucketPrefix = bucketPrefix,
                Versioning = new BucketVersioningArgs
                {{
                    Enabled = true
                }},
                ServerSideEncryptionConfiguration = new BucketServerSideEncryptionConfigurationArgs
                {{
                    Rule = new BucketServerSideEncryptionConfigurationRuleArgs
                    {{
                        ApplyServerSideEncryptionByDefault = new BucketServerSideEncryptionConfigurationRuleApplyServerSideEncryptionByDefaultArgs
                        {{
                            SseAlgorithm = "AES256"
                        }}
                    }}
                }},
                Tags = commonTags
            }});
            
            // Example 2: IAM Role for EC2 instances
            var assumeRolePolicy = JsonSerializer.Serialize(new Dictionary<string, object>
            {{
                ["Version"] = "2012-10-17",
                ["Statement"] = new[]
                {{
                    new Dictionary<string, object>
                    {{
                        ["Action"] = "sts:AssumeRole",
                        ["Effect"] = "Allow",
                        ["Principal"] = new Dictionary<string, object>
                        {{
                            ["Service"] = "ec2.amazonaws.com"
                        }}
                    }}
                }}
            }});
            
            var ec2RolePrefix = $"{{projectName}}-ec2-";
            var ec2Role = new Role("ec2-role", new RoleArgs
            {{
                NamePrefix = ec2RolePrefix,
                AssumeRolePolicy = assumeRolePolicy,
                Tags = commonTags
            }});
            
            // Attach policy to the role
            var rolePolicyAttachment = new RolePolicyAttachment("ec2-role-policy", new RolePolicyAttachmentArgs
            {{
                Role = ec2Role.Name,
                PolicyArn = "arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore"
            }});
            
            // Create instance profile
            var instanceProfilePrefix = $"{{projectName}}-ec2-";
            var instanceProfile = new InstanceProfile("ec2-instance-profile", new InstanceProfileArgs
            {{
                NamePrefix = instanceProfilePrefix,
                Role = ec2Role.Name
            }});
            
            // Example 3: Security Group
            var webSgPrefix = $"{{projectName}}-web-";
            var webSecurityGroup = new SecurityGroup("web-sg", new SecurityGroupArgs
            {{
                NamePrefix = webSgPrefix,
                Description = "Security group for web applications",
                Ingress = new[]
                {{
                    new SecurityGroupIngressArgs
                    {{
                        Protocol = "tcp",
                        FromPort = 80,
                        ToPort = 80,
                        CidrBlocks = {{ "0.0.0.0/0" }},
                        Description = "HTTP access"
                    }},
                    new SecurityGroupIngressArgs
                    {{
                        Protocol = "tcp",
                        FromPort = 443,
                        ToPort = 443,
                        CidrBlocks = {{ "0.0.0.0/0" }},
                        Description = "HTTPS access"
                    }},
                    new SecurityGroupIngressArgs
                    {{
                        Protocol = "tcp",
                        FromPort = 22,
                        ToPort = 22,
                        CidrBlocks = {{ "10.0.0.0/8" }},
                        Description = "SSH access from private networks"
                    }}
                }},
                Egress = new[]
                {{
                    new SecurityGroupEgressArgs
                    {{
                        Protocol = "-1",
                        FromPort = 0,
                        ToPort = 0,
                        CidrBlocks = {{ "0.0.0.0/0" }},
                        Description = "All outbound traffic"
                    }}
                }},
                Tags = commonTags
            }});
            
            // Example 4: CloudWatch Log Group
            var logGroupPrefix = $"/aws/pulumi/{{projectName}}/";
            var logGroup = new LogGroup("app-logs", new LogGroupArgs
            {{
                NamePrefix = logGroupPrefix,
                RetentionInDays = 14,
                Tags = commonTags
            }});
            
            // Example 5: SSM Parameter
            var configValue = new Dictionary<string, object>
            {{
                ["environment"] = environment,
                ["region"] = awsRegion,
                ["project"] = projectName
            }};
            
            var parameterName = $"/{{projectName}}/{{Deployment.Instance.StackName}}/config";
            var configParameter = new Parameter("app-config", new ParameterArgs
            {{
                Name = parameterName,
                Type = "String",
                Value = JsonSerializer.Serialize(configValue),
                Description = $"Configuration for {{projectName}}",
                Tags = commonTags
            }});
            
            // Outputs
            return new Dictionary<string, object?>
            {{
                ["bucketName"] = exampleBucket.BucketName,
                ["bucketArn"] = exampleBucket.Arn,
                ["securityGroupId"] = webSecurityGroup.Id,
                ["logGroupName"] = logGroup.Name,
                ["configParameterName"] = configParameter.Name,
                ["instanceProfileName"] = instanceProfile.Name,
                ["environment"] = environment,
                ["awsRegion"] = awsRegion,
                ["projectInfo"] = new Dictionary<string, object>
                {{
                    ["name"] = projectName,
                    ["stack"] = Deployment.Instance.StackName,
                    ["backend"] = "local",
                    ["generatedBy"] = "Pulumi Factory"
                }}
            }};
        }});
    }}
}}
'''
        
        with open('Program.cs', 'w', encoding='utf-8') as f:
            f.write(main_content)
        
        logger.info("C# examples generated successfully")
    
    def generate_yaml_examples(self):
        """
        Generate YAML-specific example code.
        """
        logger.info("Generating YAML examples...")
        
        # Read existing Pulumi.yaml and enhance it
        try:
            import yaml
            with open('Pulumi.yaml', 'r', encoding='utf-8') as f:
                config = yaml.safe_load(f)
        except FileNotFoundError:
            config = {{}}
        
        # Add example resources to the configuration
        if 'resources' not in config:
            config['resources'] = {{}}
        
        # Example resources
        example_resources = {{
            # S3 Bucket example
            'example-bucket': {{
                'type': 'aws:s3:Bucket',
                'properties': {{
                    'bucketPrefix': f'{self.project_name}-{self.stack_name}-',
                    'versioning': {{
                        'enabled': True
                    }},
                    'serverSideEncryptionConfiguration': {{
                        'rule': {{
                            'applyServerSideEncryptionByDefault': {{
                                'sseAlgorithm': 'AES256'
                            }}
                        }}
                    }},
                    'tags': {{
                        'Environment': '${{project:environment}}',
                        'Project': f'{self.project_name}',
                        'Stack': '${{pulumi.stack}}',
                        'ManagedBy': 'Pulumi',
                        'Backend': 'Local'
                    }}
                }}
            }},
            
            # Security Group example
            'web-security-group': {{
                'type': 'aws:ec2:SecurityGroup',
                'properties': {{
                    'namePrefix': f'{self.project_name}-web-',
                    'description': 'Security group for web applications',
                    'ingress': [
                        {{
                            'protocol': 'tcp',
                            'fromPort': 80,
                            'toPort': 80,
                            'cidrBlocks': ['0.0.0.0/0'],
                            'description': 'HTTP access'
                        }},
                        {{
                            'protocol': 'tcp',
                            'fromPort': 443,
                            'toPort': 443,
                            'cidrBlocks': ['0.0.0.0/0'],
                            'description': 'HTTPS access'
                        }},
                        {{
                            'protocol': 'tcp',
                            'fromPort': 22,
                            'toPort': 22,
                            'cidrBlocks': ['10.0.0.0/8'],
                            'description': 'SSH access from private networks'
                        }}
                    ],
                    'egress': [
                        {{
                            'protocol': '-1',
                            'fromPort': 0,
                            'toPort': 0,
                            'cidrBlocks': ['0.0.0.0/0'],
                            'description': 'All outbound traffic'
                        }}
                    ],
                    'tags': {{
                        'Environment': '${{project:environment}}',
                        'Project': f'{self.project_name}',
                        'Stack': '${{pulumi.stack}}',
                        'ManagedBy': 'Pulumi',
                        'Backend': 'Local'
                    }}
                }}
            }},
            
            # CloudWatch Log Group example
            'app-log-group': {{
                'type': 'aws:cloudwatch:LogGroup',
                'properties': {{
                    'namePrefix': f'/aws/pulumi/{self.project_name}/',
                    'retentionInDays': 14,
                    'tags': {{
                        'Environment': '${{project:environment}}',
                        'Project': f'{self.project_name}',
                        'Stack': '${{pulumi.stack}}',
                        'ManagedBy': 'Pulumi',
                        'Backend': 'Local'
                    }}
                }}
            }},
            
            # SSM Parameter example
            'config-parameter': {{
                'type': 'aws:ssm:Parameter',
                'properties': {{
                    'name': f'/{self.project_name}/${{pulumi.stack}}/config',
                    'type': 'String',
                    'value': '{{\"environment\":\"${{project:environment}}\",\"region\":\"${{aws:region}}\",\"project\":\"' + self.project_name + '\"}}',
                    'description': f'Configuration for {self.project_name}',
                    'tags': {{
                        'Environment': '${{project:environment}}',
                        'Project': f'{self.project_name}',
                        'Stack': '${{pulumi.stack}}',
                        'ManagedBy': 'Pulumi',
                        'Backend': 'Local'
                    }}
                }}
            }}
        }}
        
        # Add example resources to config
        config['resources'].update(example_resources)
        
        # Add outputs section
        if 'outputs' not in config:
            config['outputs'] = {{}}
        
        config['outputs'].update({{
            'bucketName': '${{example-bucket.bucket}}',
            'bucketArn': '${{example-bucket.arn}}',
            'securityGroupId': '${{web-security-group.id}}',
            'logGroupName': '${{app-log-group.name}}',
            'configParameterName': '${{config-parameter.name}}',
            'projectInfo': {{
                'name': self.project_name,
                'stack': '${{pulumi.stack}}',
                'backend': 'local',
                'generatedBy': 'Pulumi Factory'
            }}
        }})
        
        # Write enhanced Pulumi.yaml
        with open('Pulumi.yaml', 'w', encoding='utf-8') as f:
            yaml.dump(config, f, default_flow_style=False, sort_keys=False, indent=2)
        
        logger.info("YAML examples generated successfully")
    
    def create_examples(self):
        """
        Create examples based on the template type.
        """
        try:
            logger.info(f"Creating examples for {self.template} template...")
            
            if self.template == 'python':
                self.generate_python_examples()
            elif self.template == 'typescript':
                self.generate_typescript_examples()
            elif self.template == 'go':
                self.generate_go_examples()
            elif self.template == 'csharp':
                self.generate_csharp_examples()
            elif self.template == 'yaml':
                self.generate_yaml_examples()
            else:
                logger.warning(f"Unknown template type: {self.template}")
                return
            
            logger.info("Examples created successfully")
            
        except Exception as e:
            logger.error(f"Failed to create examples: {str(e)}")
            raise


def main():
    """
    Main function to create examples for local backend Pulumi project.
    """
    parser = argparse.ArgumentParser(
        description='Create example infrastructure code for local backend Pulumi project'
    )
    parser.add_argument(
        '--project-name',
        required=True,
        help='Name of the Pulumi project'
    )
    parser.add_argument(
        '--stack-name',
        required=True,
        help='Name of the Pulumi stack'
    )
    parser.add_argument(
        '--template',
        required=True,
        choices=['python', 'typescript', 'go', 'csharp', 'yaml'],
        help='Pulumi template type'
    )
    
    args = parser.parse_args()
    
    logger.info("=== Pulumi Factory - Examples Generation ===")
    logger.info(f"Project: {args.project_name}")
    logger.info(f"Stack: {args.stack_name}")
    logger.info(f"Template: {args.template}")
    
    try:
        # Initialize examples generator
        examples_generator = ExamplesGenerator(
            args.project_name,
            args.stack_name,
            args.template
        )
        
        # Create examples
        examples_generator.create_examples()
        
        logger.info("=== Examples Generation Complete ===")
        return 0
        
    except Exception as e:
        logger.error(f"Examples generation failed: {str(e)}")
        return 1


if __name__ == '__main__':
    sys.exit(main())