#!/usr/bin/env python3
"""
Pulumi Factory - Documentation Generation Script

This script generates comprehensive documentation for local backend Pulumi projects:
1. Creates detailed README.md with setup instructions
2. Generates DEVELOPMENT.md with local development guide
3. Creates template-specific documentation
4. Includes migration guide to cloud backends

SECURITY NOTES:
- This script only creates documentation files
- No network calls or credential handling
- All operations are local file system only
- Documentation templates are embedded in the script

Author: Pulumi Factory - Local Backend
"""

import argparse
import logging
import sys
from datetime import datetime
from pathlib import Path
from typing import Dict, Any

# Configure logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler(sys.stdout)
    ]
)
logger = logging.getLogger(__name__)


class DocumentationGenerator:
    """
    Generates comprehensive documentation for local backend Pulumi projects.
    
    This class handles:
    - README.md generation
    - Development guide creation
    - Template-specific documentation
    - Migration guides
    """
    
    def __init__(self, project_name: str, stack_name: str, template: str, description: str):
        """
        Initialize the documentation generator.
        
        Args:
            project_name: Name of the Pulumi project
            stack_name: Name of the Pulumi stack
            template: Pulumi template type
            description: Project description
        """
        self.project_name = project_name
        self.stack_name = stack_name
        self.template = template
        self.description = description
        self.generation_date = datetime.now().strftime('%Y-%m-%d')
        
        logger.info(f"Initialized documentation generator for {project_name} ({template})")
    
    def generate_readme(self) -> str:
        """
        Generate comprehensive README.md content.
        
        Returns:
            README.md content as string
        """
        template_specific_setup = {
            'python': """
### Python Setup

1. **Create virtual environment**:
   ```bash
   python -m venv venv
   source venv/bin/activate  # On Windows: venv\\Scripts\\activate
   ```

2. **Install dependencies**:
   ```bash
   pip install -r requirements.txt
   ```

3. **Verify Python environment**:
   ```bash
   python --version  # Should be 3.8+
   which python      # Should point to venv
   ```
""",
            'typescript': """
### TypeScript/Node.js Setup

1. **Install Node.js dependencies**:
   ```bash
   npm install
   # or
   yarn install
   ```

2. **Verify Node.js environment**:
   ```bash
   node --version   # Should be 14+
   npm --version    # Should be 6+
   ```

3. **Build TypeScript**:
   ```bash
   npm run build
   ```
""",
            'go': """
### Go Setup

1. **Initialize Go module** (if not already done):
   ```bash
   go mod init {self.project_name}
   ```

2. **Install dependencies**:
   ```bash
   go mod tidy
   ```

3. **Verify Go environment**:
   ```bash
   go version  # Should be 1.18+
   go env GOPATH
   ```
""",
            'csharp': """
### .NET/C# Setup

1. **Restore NuGet packages**:
   ```bash
   dotnet restore
   ```

2. **Build the project**:
   ```bash
   dotnet build
   ```

3. **Verify .NET environment**:
   ```bash
   dotnet --version  # Should be 6.0+
   ```
""",
            'yaml': """
### YAML Template Setup

1. **Verify Pulumi CLI**:
   ```bash
   pulumi version
   ```

2. **Validate YAML syntax**:
   ```bash
   pulumi config
   pulumi preview
   ```
"""
        }
        
        readme_content = f"""# {self.project_name}

{self.description}

## Project Overview

This is a Pulumi project using the **{self.template}** template with a **local backend** for state storage. The project is configured for local development and can be easily migrated to cloud backends when needed.

### Project Details

- **Project Name**: `{self.project_name}`
- **Stack Name**: `{self.stack_name}`
- **Template**: `{self.template}`
- **Backend**: Local file-based storage
- **Generated**: {self.generation_date}
- **Generated By**: Pulumi Factory (Local Backend)

## Quick Start

### Prerequisites

- [Pulumi CLI](https://www.pulumi.com/docs/get-started/install/) installed and configured
- Appropriate runtime for {self.template} template installed
- Git for version control

{template_specific_setup.get(self.template, "")}

### Initial Setup

1. **Clone and navigate to the project**:
   ```bash
   git clone <repository-url>
   cd {self.project_name}
   ```

2. **Select the Pulumi stack**:
   ```bash
   pulumi stack select {self.stack_name}
   ```

3. **Review configuration**:
   ```bash
   pulumi config
   ```

4. **Preview infrastructure**:
   ```bash
   pulumi preview
   ```

5. **Deploy infrastructure**:
   ```bash
   pulumi up
   ```

## Local Backend Information

This project uses Pulumi's local backend, which stores state files locally in the `.pulumi/` directory. This approach offers several benefits for development:

### Benefits of Local Backend
- **No cloud credentials required** for getting started
- **Fast iteration** during development
- **Complete control** over state files
- **Easy debugging** with local file access
- **Cost-effective** for development and testing

### Local Backend Characteristics
- State files stored in `.pulumi/` directory
- Stack configurations in `Pulumi.{self.stack_name}.yaml`
- No automatic backup or versioning
- Single-user access (no collaboration features)
- Perfect for development and proof-of-concepts

## Project Structure

```
{self.project_name}/
├── .pulumi/                    # Local backend state files
├── scripts/                    # Development helper scripts
│   ├── preview.py             # Preview infrastructure changes
│   ├── deploy.py              # Deploy infrastructure
│   └── destroy.py             # Destroy infrastructure (careful!)
├── Pulumi.yaml                # Project configuration
├── Pulumi.{self.stack_name}.yaml       # Stack configuration
├── .gitignore                 # Git ignore rules
├── README.md                  # This file
├── DEVELOPMENT.md             # Development guide
└── MIGRATION.md               # Cloud backend migration guide
"""

        # Add template-specific project structure
        if self.template == 'python':
            readme_content += """
├── __main__.py                # Main Pulumi program
├── requirements.txt           # Python dependencies
└── venv/                      # Python virtual environment (local)
"""
        elif self.template == 'typescript':
            readme_content += """
├── index.ts                   # Main Pulumi program
├── package.json               # Node.js dependencies
├── tsconfig.json              # TypeScript configuration
└── node_modules/              # Node.js packages (local)
"""
        elif self.template == 'go':
            readme_content += """
├── main.go                    # Main Pulumi program
├── go.mod                     # Go module definition
├── go.sum                     # Go dependency checksums
└── vendor/                    # Go vendor directory (optional)
"""
        elif self.template == 'csharp':
            readme_content += """
├── Program.cs                 # Main Pulumi program
├── {self.project_name}.csproj          # .NET project file
├── bin/                       # Compiled binaries (local)
└── obj/                       # Build artifacts (local)
"""
        elif self.template == 'yaml':
            readme_content += """
├── Pulumi.yaml                # Combined project and infrastructure definition
"""

        readme_content += f"""
```

## Development Workflow

### Daily Development

1. **Start your development session**:
   ```bash
   pulumi stack select {self.stack_name}
   pulumi config  # Review current configuration
   ```

2. **Make infrastructure changes**:
   - Edit your infrastructure code
   - Add new resources or modify existing ones

3. **Preview changes**:
   ```bash
   pulumi preview
   # or use the helper script
   python scripts/preview.py
   ```

4. **Deploy changes**:
   ```bash
   pulumi up
   # or use the helper script
   python scripts/deploy.py
   ```

5. **Verify deployment**:
   ```bash
   pulumi stack output  # View stack outputs
   pulumi stack export  # Export current state (for backup)
   ```

### Configuration Management

View current configuration:
```bash
pulumi config
```

Set configuration values:
```bash
pulumi config set <key> <value>
pulumi config set --secret <key> <secret-value>  # For sensitive values
```

Remove configuration:
```bash
pulumi config rm <key>
```

### State Management

Export state (for backup):
```bash
pulumi stack export --file backup.json
```

Import state (restore from backup):
```bash
pulumi stack import --file backup.json
```

## Common Commands

| Command | Description |
|---------|-------------|
| `pulumi stack ls` | List all stacks |
| `pulumi stack select <stack>` | Switch to a different stack |
| `pulumi config` | Show current configuration |
| `pulumi preview` | Preview infrastructure changes |
| `pulumi up` | Deploy infrastructure changes |
| `pulumi down` | Destroy all infrastructure |
| `pulumi stack output` | Show stack outputs |
| `pulumi logs` | Show recent logs |
| `pulumi history` | Show deployment history |

## Troubleshooting

### Common Issues

1. **Stack not found**:
   ```bash
   pulumi stack select {self.stack_name}
   ```

2. **State file corruption**:
   ```bash
   # Restore from backup
   pulumi stack import --file backup.json
   ```

3. **Configuration issues**:
   ```bash
   # Check configuration
   pulumi config
   # Reset configuration if needed
   pulumi config set <key> <new-value>
   ```

4. **Resource conflicts**:
   ```bash
   # Force refresh from actual infrastructure
   pulumi refresh
   ```

### Debug Information

Get detailed debug information:
```bash
pulumi preview --debug
pulumi up --debug
```

### Getting Help

- [Pulumi Documentation](https://www.pulumi.com/docs/)
- [Pulumi Community Slack](https://slack.pulumi.com/)
- [Pulumi GitHub Issues](https://github.com/pulumi/pulumi/issues)

## Migration to Cloud Backend

When you're ready to migrate to a cloud backend (S3, Azure Blob, GCS), see the [MIGRATION.md](MIGRATION.md) guide for detailed instructions.

## Security Considerations

### Local Backend Security
- State files contain resource details and may include sensitive information
- Store backups securely (encrypted storage recommended)
- Don't commit `.pulumi/` directory to version control
- Consider cloud backend for production workloads

### Secrets Management
- Use `pulumi config set --secret` for sensitive values
- Secrets are encrypted in local state files
- Consider external secret management for production

## Contributing

1. Fork the repository
2. Create a feature branch
3. Make your changes
4. Test with `pulumi preview`
5. Deploy and verify with `pulumi up`
6. Submit a pull request

## Support

For issues related to this project setup, please refer to:
- [DEVELOPMENT.md](DEVELOPMENT.md) for development guidance
- [MIGRATION.md](MIGRATION.md) for backend migration help
- Project issues in the repository

---

**Generated by Pulumi Factory (Local Backend)**  
**Date**: {self.generation_date}
"""

        return readme_content
    
    def generate_development_guide(self) -> str:
        """
        Generate DEVELOPMENT.md content.
        
        Returns:
            DEVELOPMENT.md content as string
        """
        dev_guide_content = f"""# Development Guide - {self.project_name}

This guide provides detailed information for developing and maintaining the `{self.project_name}` Pulumi project with local backend.

## Development Environment Setup

### Required Tools

1. **Pulumi CLI**: 3.0.0 or later
   ```bash
   # Installation
   curl -fsSL https://get.pulumi.com | sh
   
   # Verification
   pulumi version
   ```

2. **Runtime Environment**: {self.template.title()}
"""

        # Add template-specific development setup
        if self.template == 'python':
            dev_guide_content += """
   ```bash
   # Python 3.8+ required
   python --version
   
   # Virtual environment setup
   python -m venv venv
   source venv/bin/activate  # Linux/Mac
   venv\\Scripts\\activate     # Windows
   
   # Install dependencies
   pip install -r requirements.txt
   ```
"""
        elif self.template == 'typescript':
            dev_guide_content += """
   ```bash
   # Node.js 14+ and npm required
   node --version
   npm --version
   
   # Install dependencies
   npm install
   
   # Build project
   npm run build
   ```
"""
        elif self.template == 'go':
            dev_guide_content += """
   ```bash
   # Go 1.18+ required
   go version
   
   # Initialize module (if needed)
   go mod init {self.project_name}
   
   # Install dependencies
   go mod tidy
   ```
"""
        elif self.template == 'csharp':
            dev_guide_content += """
   ```bash
   # .NET 6.0+ required
   dotnet --version
   
   # Restore packages
   dotnet restore
   
   # Build project
   dotnet build
   ```
"""

        dev_guide_content += f"""

3. **Git**: For version control
   ```bash
   git --version
   ```

### Local Backend Configuration

The project is configured to use Pulumi's local backend:

- **State Storage**: `.pulumi/` directory
- **Configuration**: `Pulumi.{self.stack_name}.yaml`
- **Backend URL**: `file://~` (local filesystem)

#### Advantages of Local Backend

1. **No External Dependencies**: No cloud accounts or services required
2. **Fast Development**: Immediate access to state files
3. **Cost Effective**: No additional costs for state storage
4. **Full Control**: Complete ownership of state data
5. **Debugging**: Direct access to state files for troubleshooting

#### Limitations to Consider

1. **Single User**: No built-in collaboration features
2. **No Automatic Backup**: Manual backup processes required
3. **Local Only**: State tied to local machine
4. **No Locking**: Concurrent access not prevented

## Development Workflow

### 1. Project Initialization

When starting development:

```bash
# Navigate to project directory
cd {self.project_name}

# Verify Pulumi setup
pulumi whoami  # Should show local backend
pulumi stack ls  # Should show {self.stack_name}

# Select the stack
pulumi stack select {self.stack_name}

# Review configuration
pulumi config
```

### 2. Making Changes

#### Infrastructure Code Changes

1. **Edit Infrastructure Code**: Modify your {self.template} files
2. **Validate Syntax**: Use your runtime's validation tools
3. **Preview Changes**: Always preview before deploying

```bash
# Preview changes
pulumi preview

# Use detailed preview for complex changes
pulumi preview --diff --show-secrets
```

#### Configuration Changes

```bash
# Set configuration values
pulumi config set aws:region us-west-2
pulumi config set environment development

# Set secret configuration
pulumi config set --secret database:password mySecretPassword

# Remove configuration
pulumi config rm old-config-key
```

### 3. Testing and Validation

#### Local Testing

```bash
# Preview with debug information
pulumi preview --debug

# Validate configuration
pulumi config

# Check for dependency issues"""

        if self.template == 'python':
            dev_guide_content += """
pip check  # Check for dependency conflicts"""
        elif self.template == 'typescript':
            dev_guide_content += """
npm audit  # Check for security issues"""
        elif self.template == 'go':
            dev_guide_content += """
go mod verify  # Verify dependencies"""
        elif self.template == 'csharp':
            dev_guide_content += """
dotnet list package --vulnerable  # Check for vulnerabilities"""

        dev_guide_content += """
```

#### Deployment Testing

```bash
# Deploy to development stack
pulumi up

# Verify deployment
pulumi stack output
pulumi logs --follow

# Test infrastructure functionality
# (Add your specific tests here)
```

### 4. State Management

#### Backup Strategies

**Daily Backup** (Recommended):
```bash
# Export state to backup file
pulumi stack export --file "backup-$(date +%Y%m%d).json"

# Store backup in secure location
mv backup-*.json ~/pulumi-backups/
```

**Pre-deployment Backup**:
```bash
# Always backup before major changes
pulumi stack export --file "pre-deployment-backup.json"
pulumi up
```

#### State Recovery

If state becomes corrupted:

```bash
# Import from backup
pulumi stack import --file backup-20231207.json

# Verify state consistency
pulumi refresh
```

## Advanced Development Topics

### Multiple Environments

Create separate stacks for different environments:

```bash
# Create new stack for staging
pulumi stack init staging
pulumi config set environment staging
pulumi config set aws:region us-east-1

# Switch between stacks
pulumi stack select development
pulumi stack select staging
```

### Secret Management

Handle sensitive data properly:

```bash
# Set secrets (encrypted in local state)
pulumi config set --secret api:key "secret-api-key"
pulumi config set --secret database:password "super-secret-password"

# View secrets (decrypted)
pulumi config get --show-secrets

# Reference secrets in code"""

        if self.template == 'python':
            dev_guide_content += """
import pulumi

# In Python
api_key = pulumi.Config().require_secret("api:key")
"""
        elif self.template == 'typescript':
            dev_guide_content += """
import * as pulumi from "@pulumi/pulumi";

// In TypeScript
const config = new pulumi.Config();
const apiKey = config.requireSecret("api:key");
"""

        dev_guide_content += f"""
```

### Custom Helper Scripts

The project includes development scripts in the `scripts/` directory:

- **`preview.py`**: Preview infrastructure changes
- **`deploy.py`**: Deploy infrastructure
- **`destroy.py`**: Destroy infrastructure (use carefully)

Make scripts executable and use them:

```bash
# Make executable (Unix/Linux/Mac)
chmod +x scripts/*.py

# Use scripts
python scripts/preview.py
python scripts/deploy.py
```

### Performance Optimization

#### Faster Development Cycles

1. **Use Preview**: Always preview before deploying
   ```bash
   pulumi preview --target specific-resource
   ```

2. **Selective Updates**: Target specific resources
   ```bash
   pulumi up --target specific-resource-name
   ```

3. **Parallel Operations**: Enable parallelism
   ```bash
   pulumi up --parallel 10
   ```

## Troubleshooting Guide

### Common Issues

#### 1. Stack Not Found

**Error**: `error: stack '{self.stack_name}' not found`

**Solution**:
```bash
pulumi stack ls  # List available stacks
pulumi stack select {self.stack_name}  # Select correct stack
```

#### 2. Configuration Missing

**Error**: `error: required configuration key 'key' not found`

**Solution**:
```bash
pulumi config  # Check current config
pulumi config set key value  # Set missing configuration
```

#### 3. State File Corruption

**Error**: Various errors related to state inconsistency

**Solution**:
```bash
# Backup current state
cp -r .pulumi .pulumi.backup

# Import from known good backup
pulumi stack import --file backup-good.json

# Refresh state from actual infrastructure
pulumi refresh
```

#### 4. Resource Conflicts

**Error**: `resource already exists` or similar conflicts

**Solution**:
```bash
# Import existing resource
pulumi import aws:s3/bucket:Bucket my-bucket existing-bucket-name

# Or refresh state to sync with reality
pulumi refresh
```

### Debug Information

Get detailed debug information:

```bash
# Enable debug logging
export PULUMI_DEBUG=true
pulumi preview

# Or for specific operations
pulumi up --debug --verbose

# Check log files
pulumi logs
```

### Performance Issues

If operations are slow:

1. **Check Resource Count**: Large stacks take longer
   ```bash
   pulumi stack --show-urns | wc -l
   ```

2. **Increase Parallelism**:
   ```bash
   pulumi up --parallel 20
   ```

3. **Use Targeted Operations**:
   ```bash
   pulumi up --target specific-resource
   ```

## Migration Planning

### When to Migrate to Cloud Backend

Consider migrating when you need:

1. **Team Collaboration**: Multiple developers
2. **Automatic Backups**: Built-in state backup
3. **State Locking**: Prevent concurrent modifications
4. **Audit Trail**: Track state changes
5. **Production Deployment**: Higher reliability requirements

### Migration Preparation

Before migrating:

1. **Backup Current State**:
   ```bash
   pulumi stack export --file pre-migration-backup.json
   ```

2. **Document Configuration**:
   ```bash
   pulumi config > config-backup.txt
   ```

3. **Test Migration Process**: Use a copy of your project

See [MIGRATION.md](MIGRATION.md) for detailed migration instructions.

## Best Practices

### Code Organization

1. **Modular Code**: Break infrastructure into logical modules
2. **Configuration**: Use configuration for environment-specific values
3. **Naming Conventions**: Consistent resource naming
4. **Documentation**: Comment complex infrastructure decisions

### State Management

1. **Regular Backups**: Daily state exports
2. **Backup Storage**: Secure, versioned backup storage
3. **State Validation**: Regular `pulumi refresh` operations
4. **Clean Deployments**: Avoid manual infrastructure changes

### Security

1. **Secret Management**: Use `--secret` for sensitive data
2. **Access Control**: Limit access to state files
3. **Backup Encryption**: Encrypt state backups
4. **Regular Updates**: Keep Pulumi and dependencies updated

## Getting Help

### Resources

- **Pulumi Documentation**: https://www.pulumi.com/docs/
- **Community Slack**: https://slack.pulumi.com/
- **GitHub Issues**: https://github.com/pulumi/pulumi/issues
- **Stack Overflow**: Tag questions with `pulumi`

### Project-Specific Help

- Review `README.md` for quick start guide
- Check `MIGRATION.md` for backend migration help
- Examine `scripts/` directory for automation examples

---

**Generated by Pulumi Factory (Local Backend)**  
**Date**: {self.generation_date}  
**Project**: {self.project_name}  
**Stack**: {self.stack_name}  
**Template**: {self.template}
"""

        return dev_guide_content
    
    def generate_migration_guide(self) -> str:
        """
        Generate MIGRATION.md content for cloud backend migration.
        
        Returns:
            MIGRATION.md content as string
        """
        migration_content = f"""# Cloud Backend Migration Guide - {self.project_name}

This guide provides step-by-step instructions for migrating your `{self.project_name}` project from local backend to cloud-based backends.

## Migration Overview

Your project currently uses Pulumi's local backend with state stored in the `.pulumi/` directory. This guide covers migration to:

1. **Pulumi Cloud Backend** (Recommended - easiest)
2. **AWS S3 Backend** (Self-managed)
3. **Azure Blob Storage Backend** (Self-managed)
4. **Google Cloud Storage Backend** (Self-managed)

## Pre-Migration Checklist

Before starting migration, ensure you have:

- [ ] **Working Local Setup**: Project deploys successfully with `pulumi up`
- [ ] **State Backup**: Current state exported to backup file
- [ ] **Configuration Backup**: All configuration values documented
- [ ] **Cloud Credentials**: Access to target cloud provider (if applicable)
- [ ] **Testing Environment**: Ability to test migration process
- [ ] **Team Notification**: All team members aware of migration

### Create Backups

**Critical**: Always backup before migration:

```bash
# Export current state
pulumi stack export --file "pre-migration-{self.stack_name}-$(date +%Y%m%d).json"

# Backup configuration
pulumi config > "pre-migration-config-{self.stack_name}.txt"

# Backup entire project
tar -czf "{self.project_name}-backup-$(date +%Y%m%d).tar.gz" .
```

## Migration Option 1: Pulumi Cloud Backend (Recommended)

Pulumi Cloud provides managed backend services with collaboration features.

### Step 1: Create Pulumi Cloud Account

1. Sign up at https://app.pulumi.com
2. Create an organization (or use personal account)
3. Generate access token

### Step 2: Login to Pulumi Cloud

```bash
# Login with access token
pulumi login

# Verify login
pulumi whoami
```

### Step 3: Migrate Stack

```bash
# Create new stack in Pulumi Cloud
pulumi stack init {self.project_name}/{self.stack_name}

# Import existing state
pulumi stack import --file "pre-migration-{self.stack_name}-$(date +%Y%m%d).json"

# Verify migration
pulumi stack ls
pulumi config
pulumi preview  # Should show no changes
```

### Step 4: Update Team Access

```bash
# Add team members (replace with actual usernames)
pulumi stack tag set team "development"
```

## Migration Option 2: AWS S3 Backend

Migrate to AWS S3 for self-managed backend with AWS integration.

### Prerequisites

- AWS CLI configured with appropriate permissions
- S3 bucket for state storage
- Optional: KMS key for encryption

### Step 1: Create S3 Resources

```bash
# Create S3 bucket (replace with unique name)
aws s3 mb s3://pulumi-state-{self.project_name}-$(date +%s)

# Enable versioning
aws s3api put-bucket-versioning \\
  --bucket pulumi-state-{self.project_name}-$(date +%s) \\
  --versioning-configuration Status=Enabled

# Optional: Create KMS key for encryption
aws kms create-key --description "Pulumi state encryption for {self.project_name}"
```

### Step 2: Login to S3 Backend

```bash
# Login to S3 backend (replace with your bucket name)
pulumi login s3://your-bucket-name

# Verify login
pulumi whoami
```

### Step 3: Migrate Stack

```bash
# Create stack in S3 backend
pulumi stack init {self.stack_name}

# Import state
pulumi stack import --file "pre-migration-{self.stack_name}-$(date +%Y%m%d).json"

# Verify migration
pulumi preview  # Should show no changes
```

## Migration Option 3: Azure Blob Storage Backend

Migrate to Azure Blob Storage for Azure-integrated deployments.

### Prerequisites

- Azure CLI configured
- Azure Storage Account
- Container for state storage

### Step 1: Create Azure Resources

```bash
# Create resource group
az group create --name pulumi-state-rg --location eastus

# Create storage account
az storage account create \\
  --name pulumistate$(date +%s) \\
  --resource-group pulumi-state-rg \\
  --location eastus \\
  --sku Standard_LRS

# Create container
az storage container create \\
  --name pulumi-state \\
  --account-name pulumistate$(date +%s)
```

### Step 2: Configure Azure Backend

```bash
# Set environment variables
export AZURE_STORAGE_ACCOUNT="your-storage-account-name"
export AZURE_STORAGE_KEY="your-storage-key"

# Login to Azure backend
pulumi login azblob://pulumi-state

# Verify login  
pulumi whoami
```

### Step 3: Migrate Stack

```bash
# Create stack
pulumi stack init {self.stack_name}

# Import state
pulumi stack import --file "pre-migration-{self.stack_name}-$(date +%Y%m%d).json"

# Verify migration
pulumi preview
```

## Migration Option 4: Google Cloud Storage Backend

Migrate to Google Cloud Storage for GCP-integrated deployments.

### Prerequisites

- Google Cloud CLI configured
- GCS bucket for state storage

### Step 1: Create GCS Resources

```bash
# Create bucket (replace with unique name)
gsutil mb gs://pulumi-state-{self.project_name}-$(date +%s)

# Enable versioning
gsutil versioning set on gs://your-bucket-name
```

### Step 2: Configure GCS Backend

```bash
# Login to GCS backend
pulumi login gs://your-bucket-name

# Verify login
pulumi whoami
```

### Step 3: Migrate Stack

```bash
# Create stack
pulumi stack init {self.stack_name}

# Import state
pulumi stack import --file "pre-migration-{self.stack_name}-$(date +%Y%m%d).json"

# Verify migration
pulumi preview
```

## Post-Migration Steps

After successful migration to any cloud backend:

### 1. Verify Migration

```bash
# Confirm backend change
pulumi whoami  # Should show new backend

# Check stack status
pulumi stack ls
pulumi stack select {self.stack_name}

# Verify state integrity
pulumi refresh
pulumi preview  # Should show no changes

# Test deployment
pulumi up  # Should deploy without issues
```

### 2. Update Project Configuration

Update `Pulumi.yaml` to document the backend change:

```yaml
name: {self.project_name}
runtime: {self.template}
description: {self.description}
backend:
  url: <your-backend-url>
metadata:
  backend_type: cloud  # or s3, azblob, gcs
  migrated_from: local
  migration_date: {self.generation_date}
```

### 3. Update Documentation

Update project documentation:

```bash
# Update README.md to reflect cloud backend
# Remove local backend specific instructions
# Add team collaboration information
```

### 4. Clean Up Local Files

After confirming successful migration:

```bash
# Archive local .pulumi directory
tar -czf "local-state-archive-$(date +%Y%m%d).tar.gz" .pulumi/

# Remove local state (after confirming cloud backend works)
# rm -rf .pulumi/  # Uncomment after thorough testing
```

### 5. Team Setup

For team environments:

```bash
# Share backend URL with team members
# Provide access credentials/tokens
# Update deployment pipelines
# Update CI/CD configurations
```

## Rollback Procedure

If migration fails, rollback to local backend:

```bash
# Login back to local backend
pulumi login file://~

# Restore from backup
pulumi stack import --file "pre-migration-{self.stack_name}-$(date +%Y%m%d).json"

# Verify rollback
pulumi preview
```

## Common Migration Issues

### Issue 1: State Import Fails

**Error**: `error: importing stack: ...`

**Solutions**:
```bash
# Check state file format
cat pre-migration-*.json | jq .

# Try importing with force flag
pulumi stack import --file backup.json --force

# Manual stack recreation if needed
pulumi stack rm {self.stack_name}
pulumi stack init {self.stack_name}
```

### Issue 2: Configuration Missing

**Error**: `error: required configuration missing`

**Solutions**:
```bash
# Restore configuration from backup
cat pre-migration-config-*.txt

# Set missing configuration
pulumi config set key value
pulumi config set --secret key secret-value
```

### Issue 3: Resource Conflicts

**Error**: `resource already exists` or similar

**Solutions**:
```bash
# Refresh state to sync with actual resources
pulumi refresh

# Import conflicting resources
pulumi import resource-type resource-name existing-id
```

## Migration Best Practices

### Planning

1. **Test Migration**: Use project copy for testing
2. **Coordinate with Team**: Plan migration during low-activity periods
3. **Document Process**: Record migration steps and issues
4. **Backup Everything**: State, configuration, and entire project

### Execution

1. **Verify Pre-conditions**: Ensure local setup works perfectly
2. **Step-by-step**: Follow migration steps exactly
3. **Validate Each Step**: Verify each step before proceeding
4. **Test Thoroughly**: Full deployment test after migration

### Post-Migration

1. **Monitor Deployments**: Watch first few deployments closely
2. **Update Documentation**: Reflect new backend in all docs
3. **Team Training**: Ensure team understands new workflow
4. **Cleanup Gradually**: Keep local backups for some time

## Troubleshooting

### Get Help

If you encounter issues during migration:

1. **Check Pulumi Docs**: https://www.pulumi.com/docs/intro/concepts/state/
2. **Community Support**: https://slack.pulumi.com/
3. **GitHub Issues**: https://github.com/pulumi/pulumi/issues
4. **Professional Support**: Consider Pulumi professional services

### Emergency Contacts

- **Project Lead**: [Add contact information]
- **DevOps Team**: [Add contact information]
- **Pulumi Support**: [Add support information]

---

**Migration Guide Generated by Pulumi Factory (Local Backend)**  
**Date**: {self.generation_date}  
**Project**: {self.project_name}  
**Stack**: {self.stack_name}  
**Current Backend**: Local (file-based)
"""

        return migration_content
    
    def create_documentation_files(self):
        """
        Create all documentation files.
        """
        try:
            logger.info("Creating documentation files...")
            
            # Generate and write README.md
            readme_content = self.generate_readme()
            with open('README.md', 'w', encoding='utf-8') as f:
                f.write(readme_content)
            logger.info("Created README.md")
            
            # Generate and write DEVELOPMENT.md
            dev_guide_content = self.generate_development_guide()
            with open('DEVELOPMENT.md', 'w', encoding='utf-8') as f:
                f.write(dev_guide_content)
            logger.info("Created DEVELOPMENT.md")
            
            # Generate and write MIGRATION.md
            migration_content = self.generate_migration_guide()
            with open('MIGRATION.md', 'w', encoding='utf-8') as f:
                f.write(migration_content)
            logger.info("Created MIGRATION.md")
            
            logger.info("All documentation files created successfully")
            
        except Exception as e:
            logger.error(f"Failed to create documentation files: {str(e)}")
            raise


def main():
    """
    Main function to generate documentation for local backend Pulumi project.
    """
    parser = argparse.ArgumentParser(
        description='Generate comprehensive documentation for local backend Pulumi project'
    )
    parser.add_argument(
        '--project-name',
        required=True,
        help='Name of the Pulumi project'
    )
    parser.add_argument(
        '--stack-name',
        required=True,
        help='Name of the Pulumi stack'
    )
    parser.add_argument(
        '--template',
        required=True,
        choices=['python', 'typescript', 'go', 'csharp', 'yaml'],
        help='Pulumi template type'
    )
    parser.add_argument(
        '--description',
        required=True,
        help='Project description'
    )
    
    args = parser.parse_args()
    
    logger.info("=== Pulumi Factory - Documentation Generation ===")
    logger.info(f"Project: {args.project_name}")
    logger.info(f"Stack: {args.stack_name}")
    logger.info(f"Template: {args.template}")
    logger.info(f"Description: {args.description}")
    
    try:
        # Initialize documentation generator
        doc_generator = DocumentationGenerator(
            args.project_name,
            args.stack_name,
            args.template,
            args.description
        )
        
        # Create all documentation files
        doc_generator.create_documentation_files()
        
        logger.info("=== Documentation Generation Complete ===")
        return 0
        
    except Exception as e:
        logger.error(f"Documentation generation failed: {str(e)}")
        return 1


if __name__ == '__main__':
    sys.exit(main())